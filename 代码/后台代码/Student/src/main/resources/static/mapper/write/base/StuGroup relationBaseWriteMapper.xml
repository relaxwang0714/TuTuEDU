<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tutu.edu.student.mapper.write.base.StuGroup relationBaseWriteMapper">


    <insert id="insertStuGroup relation"  useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `stu_group_ relation`
        (
        <trim suffixOverrides=",">
                    <if test="id!=null">
                        `id`,
                    </if>
                    <if test="userId!=null">
                        `user_id`,
                    </if>
                    <if test="time!=null">
                        `time`,
                    </if>
                    <if test="reason!=null">
                        `reason`,
                    </if>
                    <if test="dataCreate!=null">
                        `data_create`,
                    </if>
                    <if test="dataModified!=null">
                        `data_modified`,
                    </if>
        </trim>
        )
        VALUES
        (
        <trim suffixOverrides=",">
                <if test="id!=null">
                    #{id},
                </if>
                <if test="userId!=null">
                    #{userId},
                </if>
                <if test="time!=null">
                    #{time},
                </if>
                <if test="reason!=null">
                    #{reason},
                </if>
                <if test="dataCreate!=null">
                    #{dataCreate},
                </if>
                <if test="dataModified!=null">
                    #{dataModified},
                </if>
        </trim>
        )
    </insert>




    <update id="updateStuGroup relation">
        UPDATE `stu_group_ relation`
        SET
        <trim suffixOverrides=",">
            <if test="userId != null">
                `user_id` = #{userId},
            </if>
            <if test="time != null">
                `time` = #{time},
            </if>
            <if test="reason != null and reason!=''">
                `reason` = #{reason},
            </if>
            <if test="dataCreate != null">
                `data_create` = #{dataCreate},
            </if>
            <if test="dataModified != null">
                `data_modified` = #{dataModified},
            </if>
        </trim>
        WHERE
        <trim suffixOverrides="and">
                `id` = #{id} and
        </trim>
    </update>

    <update id="update">
        UPDATE `stu_group_ relation`
        SET
        <trim suffixOverrides=",">
        <if test="set.userId != null">
            `user_id` = #{set.userId},
        </if>
        <if test="set.time != null">
            `time` = #{set.time},
        </if>
        <if test="set.reason != null and set.reason!=''">
            `reason` = #{set.reason},
        </if>
        <if test="set.dataCreate != null">
            `data_create` = #{set.dataCreate},
        </if>
        <if test="set.dataModified != null">
            `data_modified` = #{set.dataModified},
        </if>
        </trim>
        <trim prefix="where" suffixOverrides="and | or">
                <if test="where.idList != null">
                    `id` in
                    <foreach collection="where.idList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.idSt !=null">
                `id` >= #{where.idSt} and
            </if>
            <if test="where.idEd!=null">
                `id` &lt;= #{where.idEd} and
            </if>
                <if test="where.userIdList != null">
                    `user_id` in
                    <foreach collection="where.userIdList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.userIdSt !=null">
                `user_id` >= #{where.userIdSt} and
            </if>
            <if test="where.userIdEd!=null">
                `user_id` &lt;= #{where.userIdEd} and
            </if>
                <if test="where.timeList != null">
                    `time` in
                    <foreach collection="where.timeList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.timeSt !=null">
                `time` >= #{where.timeSt} and
            </if>
            <if test="where.timeEd!=null">
                `time` &lt;= #{where.timeEd} and
            </if>
                <if test="where.reasonList != null">
                    `reason` in
                    <foreach collection="where.reasonList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test ="where.fuzzyReason!=null and where.fuzzyReason.size()>0">
                (
                <foreach collection="where.fuzzyReason"  separator="or" item="item">
                    `Reason` like concat('%',#{item},'%')
                </foreach>
                ) and
            </if>
            <if test ="where.rightFuzzyReason!=null and where.rightFuzzyReason.size()>0">
                (
                <foreach collection="where.rightFuzzyReason"  separator="or" item="item">
                    `Reason` like concat(#{item},'%')
                </foreach>
                ) and
            </if>
                <if test="where.dataCreateList != null">
                    `data_create` in
                    <foreach collection="where.dataCreateList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.dataCreateSt !=null">
                `data_create` >= #{where.dataCreateSt} and
            </if>
            <if test="where.dataCreateEd!=null">
                `data_create` &lt;= #{where.dataCreateEd} and
            </if>
                <if test="where.dataModifiedList != null">
                    `data_modified` in
                    <foreach collection="where.dataModifiedList" close=")" open="(" separator="," item="item">
                        #{item}
                    </foreach> and
                </if>
            <if test="where.dataModifiedSt !=null">
                `data_modified` >= #{where.dataModifiedSt} and
            </if>
            <if test="where.dataModifiedEd!=null">
                `data_modified` &lt;= #{where.dataModifiedEd} and
            </if>
        </trim>
    </update>


</mapper>